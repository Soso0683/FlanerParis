{% comment %}
  Section : Carrousel vidéos (boucle, infini, non cliquables)
  Fichier : sections/videos-carousel.liquid
{% endcomment %}

<section id="vids-{{ section.id }}" class="vidsec">
  {% if section.settings.heading != blank %}
    <h2 class="vidsec__title">{{ section.settings.heading }}</h2>
  {% endif %}

  <div class="vidsec__viewport">
    <button class="vidsec__btn vidsec__btn--prev" aria-label="Précédent" type="button">
      ‹
    </button>

    <div class="vidsec__track" style="--visible:2; --gap: 16px;">
      {%- for block in section.blocks -%}
        <div class="vidsec__item" {{ block.shopify_attributes }}>
          <video
            class="vidsec__video"
            {% if block.settings.poster != blank %}poster="{{ block.settings.poster | img_url: '800x' }}"{% endif %}
            {% if block.settings.mp4_url != blank %}data-src="{{ block.settings.mp4_url }}"{% endif %}
            autoplay muted playsinline loop preload="auto"
          ></video>
        </div>
      {%- endfor -%}
    </div>

    <button class="vidsec__btn vidsec__btn--next" aria-label="Suivant" type="button">
      ›
    </button>
  </div>
</section>

<style>
  #vids-{{ section.id }}.vidsec{--gap:16px; --radius:16px; color:#111; font-family:inherit}
  #vids-{{ section.id }} .vidsec__title{margin:0 0 14px; text-align:center}
  #vids-{{ section.id }} .vidsec__viewport{
    position:relative; overflow:hidden; width:100%;
  }
  #vids-{{ section.id }} .vidsec__track{
    display:flex; gap:var(--gap); align-items:stretch;
    transition:transform .5s ease; will-change:transform;
  }
  /* 2 cartes visibles : largeur = (100% - gap)/2 */
  #vids-{{ section.id }} .vidsec__item{
    flex:0 0 calc((100% - var(--gap)) / var(--visible));
    border-radius:var(--radius); overflow:hidden;
    background:#000;
  }
  #vids-{{ section.id }} .vidsec__video{
    width:100%; height:100%; display:block; object-fit:cover;
    pointer-events:none; /* pas cliquable */
  }
  #vids-{{ section.id }} .vidsec__btn{
    position:absolute; top:50%; transform:translateY(-50%);
    width:36px; height:36px; border-radius:50%;
    border:none; background:#111; color:#fff; opacity:.92;
    display:grid; place-items:center; cursor:pointer; z-index:2;
  }
  #vids-{{ section.id }} .vidsec__btn--prev{left:6px}
  #vids-{{ section.id }} .vidsec__btn--next{right:6px}

  @media (max-width: 640px){
    #vids-{{ section.id }} .vidsec__btn{width:32px; height:32px}
  }
</style>

<script>
(function(){
  const root   = document.getElementById('vids-{{ section.id }}'); if(!root) return;
  const track  = root.querySelector('.vidsec__track');
  const prevB  = root.querySelector('.vidsec__btn--prev');
  const nextB  = root.querySelector('.vidsec__btn--next');

  const visible = parseInt(getComputedStyle(track).getPropertyValue('--visible')) || 2;

  // Lazy init des sources + lecture forcée (autoplay)
  const vids = Array.from(root.querySelectorAll('video'));
  vids.forEach(v => {
    const src = v.getAttribute('data-src');
    if (src) { v.src = src; v.removeAttribute('data-src'); }
    const tryPlay = () => v.play().catch(()=>{});
    tryPlay();
    document.addEventListener('visibilitychange', () => { if(!document.hidden) tryPlay(); });
  });

  // Carrousel infini avec clones
  let cards = Array.from(track.children);
  const originalCount = cards.length;
  if (originalCount < 1) return;

  // Calcul du step (carte + gap)
  const getStep = () => {
    const cardW = cards[0].getBoundingClientRect().width;
    const gap   = parseFloat(getComputedStyle(track).gap) || 0;
    return cardW + gap;
  };
  let step = getStep();

  // Cloner les extrémités (visible éléments)
  const cloneN = Math.min(visible, originalCount);
  for(let i=0;i<cloneN;i++){
    track.appendChild(cards[i].cloneNode(true));
  }
  for(let i=0;i<cloneN;i++){
    track.insertBefore(cards[originalCount - cloneN + i].cloneNode(true), track.firstChild);
  }
  cards = Array.from(track.children);

  let index = cloneN; // on démarre sur le premier vrai
  const go = (to, animate=true) => {
    index = to;
    track.style.transition = animate ? 'transform .5s ease' : 'none';
    track.style.transform = `translateX(${-index * step}px)`;
  };

  // Ajustement après transition si on est sur un clone
  track.addEventListener('transitionend', () => {
    if (index >= originalCount + cloneN){
      go(index - originalCount, false);
    } else if (index < cloneN){
      go(index + originalCount, false);
    }
  });

  nextB.addEventListener('click', () => go(index + 1, true));
  prevB.addEventListener('click', () => go(index - 1, true));

  // Resize: recalcule le step et réapplique la position
  const ro = new ResizeObserver(() => { step = getStep(); go(index, false); });
  ro.observe(root);

  // Position initiale
  go(index, false);
})();
</script>

{% schema %}
{
  "name": "Carrousel vidéos",
  "settings": [
    { "type": "text", "id": "heading", "label": "Titre", "default": "Des résultats concrets" }
  ],
  "blocks": [
    {
      "type": "video",
      "name": "Vidéo",
      "settings": [
        { "type": "url", "id": "mp4_url", "label": "URL MP4 (CDN Shopify conseillé)" },
        { "type": "image_picker", "id": "poster", "label": "Image d’attente (poster)" }
      ]
    }
  ],
  "max_blocks": 8,
  "presets": [
    { "name": "Carrousel vidéos (4)", "blocks": [{ "type": "video" }, { "type": "video" }, { "type": "video" }, { "type": "video" }] }
  ]
}
{% endschema %}
