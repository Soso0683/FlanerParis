{% comment %}
  Section : Carrousel de vidéos (upload, loop, swipe, infini, sans titre) — FIX boutons
{% endcomment %}

<section id="vids-{{ section.id }}" class="vidsec">
  <div class="vidsec__viewport">
    <button class="vidsec__btn vidsec__btn--prev" aria-label="Précédent" type="button">‹</button>

    <div class="vidsec__track">
      {%- for block in section.blocks -%}
        <div class="vidsec__item" {{ block.shopify_attributes }}>
          {% if block.settings.video != blank %}
            {{ block.settings.video
              | video_tag:
                class: 'vidsec__video',
                autoplay: true,
                muted: true,
                loop: true,
                playsinline: true,
                controls: false,
                preload: 'auto'
            }}
          {% elsif block.settings.mp4_url != blank %}
            <video class="vidsec__video"
                   src="{{ block.settings.mp4_url }}"
                   autoplay muted loop playsinline preload="auto"></video>
          {% else %}
            <div class="vidsec__placeholder">Video fehlt</div>
          {% endif %}
        </div>
      {%- endfor -%}
    </div>

    <button class="vidsec__btn vidsec__btn--next" aria-label="Suivant" type="button">›</button>
  </div>
</section>

<style>
  #vids-{{ section.id }}.vidsec{ --gap:16px; --radius:16px; color:#111; font-family:inherit }
  #vids-{{ section.id }} .vidsec__viewport{
    position:relative; overflow:hidden; width:100%;
    touch-action: pan-y;
  }
  #vids-{{ section.id }} .vidsec__track{
    --visible:3; /* desktop */
    display:flex; gap:var(--gap); align-items:stretch;
    transition:transform .5s ease; will-change:transform;
  }
  #vids-{{ section.id }} .vidsec__item{
    flex:0 0 calc((100% - (var(--gap) * (var(--visible) - 1))) / var(--visible));
    border-radius:var(--radius); overflow:hidden; background:#000;
  }
  #vids-{{ section.id }} .vidsec__video{
    width:100%; height:100%; display:block; object-fit:cover;
    pointer-events:none;
  }
  #vids-{{ section.id }} .vidsec__placeholder{
    height:220px; display:grid; place-items:center; color:#888; background:#f1f1f1
  }
  #vids-{{ section.id }} .vidsec__btn{
    position:absolute; top:50%; transform:translateY(-50%);
    width:36px; height:36px; border-radius:50%; border:none;
    background:#111; color:#fff; opacity:.92; display:grid; place-items:center;
    cursor:pointer; z-index:3; pointer-events:auto;
  }
  #vids-{{ section.id }} .vidsec__btn--prev{ left:6px }
  #vids-{{ section.id }} .vidsec__btn--next{ right:6px }

  @media (max-width: 768px){
    #vids-{{ section.id }} .vidsec__track{ --visible:2; }
    #vids-{{ section.id }} .vidsec__btn{ width:32px; height:32px }
  }
</style>

<script>
(function(){
  const root  = document.getElementById('vids-{{ section.id }}'); if(!root) return;
  const track = root.querySelector('.vidsec__track');
  const prevB = root.querySelector('.vidsec__btn--prev');
  const nextB = root.querySelector('.vidsec__btn--next');
  let items   = Array.from(track.children);
  const orig  = items.length;
  if (orig === 0) return;

  const getVisible = () => parseInt(getComputedStyle(track).getPropertyValue('--visible')) || 3;
  const getStep = () => {
    const el = items[0];
    if (!el) return 0;
    const cardW = el.getBoundingClientRect().width || 0;
    const gap   = parseFloat(getComputedStyle(track).gap) || 0;
    return cardW + gap;
  };

  // Clones pour boucle infinie
  let cloneN = Math.min(getVisible(), orig);
  for(let i=orig-cloneN; i<orig; i++){ track.insertBefore(items[i].cloneNode(true), track.firstChild); }
  for(let i=0; i<cloneN; i++){ track.appendChild(items[i].cloneNode(true)); }
  items = Array.from(track.children);

  let index = cloneN;  // premier vrai
  let step  = 0;

  function ensureStep(){
    step = getStep();
    if (step <= 0) { // fallback si layout pas encore prêt
      const vpW = root.querySelector('.vidsec__viewport').clientWidth || 1;
      const vis = getVisible();
      step = (vpW / vis) + (parseFloat(getComputedStyle(track).gap) || 0);
    }
  }

  const go = (to, animate=true) => {
    ensureStep();
    index = to;
    track.style.transition = animate ? 'transform .5s ease' : 'none';
    track.style.transform  = `translateX(${-index * step}px)`;
  };

  // Bouclage
  track.addEventListe
